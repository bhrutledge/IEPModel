<?xml version="1.0" encoding="UTF-8"?>
<!--**************************************************************************
    schema: PvDesign.xsd
    Author: Michael Palmquist (SolarNexus Inc)
    Input From: Mark Galli (Solmetric Corporation)
    Description: This schema contains elements which can be used for a number of purposes.
    The PvSystem element has a number of possible uses:
    1) It can provide detailed specifications of key electrical equipment, including PV modules, combiners, disconnects, inverters, and AC electrical panels where interconnection occurs.
    2) It can also be used to define a physical 3D layout of modules on one or more roof surfaces.
    3) It can be used to transfer system descriptions between software used to estimate system output. Full shading information is also available for inclusion in analyses.
    4) It can be used to completely define a PV system to a level of detail sufficient for creating a single line electrical diagram used for permitting.
    There are probably many other potential uses.
    
    Use the GenericPVArray element to describe a very simple, generic PV System. It mimics the data set required to run a PVWatts simulation. It does not require any specific equipment to be defined.
    
    Using the PvSystem element, one can completely define a string or micro-inverter based system.  Details for defining each can be found within the annotations of each element.
**************************************************************************** -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.iepmodel.net"
    targetNamespace="http://www.iepmodel.net">
    <xs:include schemaLocation="Common.xsd"/>
    <xs:include schemaLocation="CommonElectrical.xsd"/>
    <xs:include schemaLocation="CommonSolar.xsd"/>
    <xs:include schemaLocation="EnergyConsumption.xsd"/>
    <xs:element name="photovoltaicSystem" type="pvSystem">
        <xs:annotation>
            <xs:documentation>Root element of a PV system definition.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:complexType name="dcCombinerDefinition">
        <xs:annotation>
            <xs:documentation>Specification data defining a combiner.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="equipmentDefinition"> </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="individualStringModule">
        <xs:sequence>
            <xs:element minOccurs="0" name="Name" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Name given to a module in a specific string, for example, "S1-M1" or simply "1" of the total number of modules in the string. Typically named in a series.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="IndividualModuleRefId" type="xs:IDREF">
                <xs:annotation>
                    <xs:documentation>If the PvArray is defined with IndividualModule elements, this element can be used to link a specific module in a string to its specific IndividualModule in a PvArray. This enables a link between the electrical connection to its physical layout defined in the PvArray.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="dcString">
        <xs:annotation>
            <xs:documentation>A string of PV modules connected in series that output DC electricity.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="name" minOccurs="0" type="xs:string">
                <xs:annotation>
                    <xs:documentation>A unique identifier for the string. For example "S1."</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="moduleQuantity" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>Number of modules in this string.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="circuitConnection" type="circuitConnection" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Represents the wired connection from the string to its parent element (for example, a Combiner or InverterInput).</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="individualStringModule"
                type="individualStringModule"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="dcStringSet">
        <xs:annotation>
            <xs:documentation>A simplified description of a set of identical strings of DC PV modules connected in series. All strings in the set are identical so a single description of attributes is used for all of them for brevity. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="stringQuantity" type="xs:integer" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Number of strings in this array.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="modulesPerString" type="xs:integer" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Quantity of modules in a single series string.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="typicalStringConnection" minOccurs="0" type="circuitConnection">
                <xs:annotation>
                    <xs:documentation>Arrays can be made up of many strings. Each string has its own circuit connection.  Because the strings in any one array are almost always connected to their parent element in a common way, this TypicalCircuitConnection element defines the commonly used connection approach from any one of the strings to the parent element (a combiner, or inverter).

If circuit connections vary between strings, this element should not be used.  Instead, use the IndividualString element which contains its own CircuitConnection element.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="splitString" type="partialSourceCircuit"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="partialSourceCircuit">
        <xs:annotation>
            <xs:documentation>A Source Circuit is either a PvString, or an AcBranchCircuit. A PvArray may not have an even number of strings, or a branch circuit may be split across two physical arrays.  This type allows a partial source circuit (string or AC branch circuit) to be included within one array, noting how many modules of the total circuit length are in this array, and setting a reference to another array where the remainder of the circuit is included.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="qtyOfModulesInPartialCircuit" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>Number of modules of the partial source circuit present on this array.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="arrayHoldingRemainderOfCircuit" type="xs:IDREF">
                <xs:annotation>
                    <xs:documentation>Reference ID of the other array containing the remaining modules of the partial circuit.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="acPvBranchCircuit">
        <xs:annotation>
            <xs:documentation>An AC Branch circuit is a quantity of AC Modules connected in series.

The AC Branch Circuit defintion assumes that all AC modules in the circuit share the same PvModule and Inverter Definitions.  Although micro-inverter technology allows an AC Branch to contain different makes and models in series, this is a highly unusual use case not supported by this schema.  Such a case would typically come about in a remove and replace scenario well after the project was implemented.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="name" type="xs:string" minOccurs="0"/>
            <xs:element minOccurs="0" name="commonMicroInverterDefinitionIdRef" type="xs:IDREF">
                <xs:annotation>
                    <xs:documentation>If all the modules in the AC PV branch circuit share the same microinverter, then use this element to contain the ID of its Equipment Definition.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="acModuleQuantity" type="xs:int">
                <xs:annotation>
                    <xs:documentation>The number of AC modules tied in series. 

NOTE: An AC Module is assumed to be either:
1) an integrated micro-inverter and PV module, OR 2) an independent PV module and micro-inverter pair.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="acTieInCircuitConnection" type="circuitConnection" minOccurs="0"/>
            <xs:element minOccurs="0" name="partialAcPvBranchCircuit" type="partialSourceCircuit">
                <xs:annotation>
                    <xs:documentation>When defining the AC PV Branch Circuits included in the AcPvBranchCircuitPvArray element, the PvArray may not always have an even number of circuits.  This type allows a partial branch circuit to be included in an array, noting how many modules of the total circuit length are in this array, and setting a reference to another array where the remainder of the branch circuit is included.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="individualMicroInverter"
                type="equipmentInstanceType"/>
        </xs:sequence>
        <xs:attribute name="CommonMicroInverterDefinitionIdRef">
            <xs:annotation>
                <xs:documentation>If all the modules in the AC PV branch circuit share the same microinverter, then use this attribute to contain the ID of its Equipment Definition.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="dcCombiner">
        <xs:annotation>
            <xs:documentation>A DcCombiner only combines DC inputs.  AC circuits can be combined using an AcElectricalPanel type element.

The EquipmentDefinitionRefID for the DcCombiner references the ID of the associated CombinerDefinition.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="equipmentInstance"> </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="powerPointTrackerType">
        <xs:annotation>
            <xs:documentation>PPT in an inverter.  An inverter may have more than one PPT.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="name" minOccurs="0" type="xs:string"/>
            <xs:element minOccurs="0" name="dcStringSet" type="dcStringSet">
                <xs:annotation>
                    <xs:documentation>A simplified description of a set of identical strings.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="dcString" type="dcString">
                <xs:annotation>
                    <xs:documentation>DcStrings are suitable for use with string or central inverter system architectures.

Can optionally include detailed information on each individual string.

Allows ability to associate individual array modules to membership in individual strings.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="dcCombiner" type="dcCombiner">
                <xs:annotation>
                    <xs:documentation>A DcCombiner only combines DC inputs.  AC circuits can be combined using an AcElectricalPanel type element.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="stringInverter">
        <xs:annotation>
            <xs:documentation>Defines an inverter that converts DC electricity to AC.  Includes all the possible DC inputs.  Works well for modeling string based inverters.  

Micro-inverters are modeled by defining a single PPT with a single IndividualCircuitInput for the module feeding it. To define an AC Branch Circuit, use the AcTie-InCircuitConnection element to refer to the next inverter in the series circuit.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="equipmentInstance"> </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="pvSystem">
        <xs:annotation>
            <xs:documentation>Description of a PV System Design.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element minOccurs="0" name="applicationReferenceId" type="applicationId"
                maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>ID of the object represented by this XML rewithin a  corresponding software application. Used by the software to identify its corresponding record within the application's database. AKA a primary key. Important if the data is passed from one application back to an originating application, for example. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="name" type="xs:string" maxOccurs="1"/>
            <xs:element minOccurs="0" name="description" type="xs:string" maxOccurs="1"/>
            <xs:element name="moduleDefinition" type="pvModuleDefinition" minOccurs="0"
                maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>Specifications for a PV module used in this design. A PvDesign may contain more than PV module make and model.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="inverterDefinition" type="inverterDefinition" minOccurs="0"
                maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>Specifications for an inverter used in this design. A PvDesign may contain more than inverter make and model.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="dcCombinerDefinition"
                type="dcCombinerDefinition"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="junctionBoxDefintion"
                type="junctionBoxDefinitionType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="disconnectSwitchDefinition"
                type="disconnectSwitchDefinitionType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="electricalPanelDefinition"
                type="electricalPanelDefinitionType">
                <xs:annotation>
                    <xs:documentation>Specifications for an AC electric panel where a String Inverter or AC PV Branch Circuit may be connected. A PvSystem may contain more than one AC electric panel make and model (each Inverter or AC PV Branch Circuit can connect to different equipment).</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="pvArray" type="pvArray"/>
            <xs:element name="stringInverter" type="stringInverter" minOccurs="0"
                maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>String (or Central) Inverters that make up the system.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="acPvBranchCircuit"
                type="acPvBranchCircuit">
                <xs:annotation>
                    <xs:documentation>An AcPvBranch circuit represents micro-inverter system architectures.

NOTE: An AC Module is assumed to be either:
1) an integrated micro-inverter and PV module, OR 2) an independent PV module and micro-inverter pair.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="electricalPanel"
                type="electricalPanel">
                <xs:annotation>
                    <xs:documentation>Optional. The ElectricalPanel on which an Inverter can make its AC system tie-in. May also include parent ElectricalPanels.

Use of this element is somewhat dependent on what XSDs are used. This element is always used to describe a new electrical panel which will be added to a site to accommodate the addition of a PV system (perhaps serving as an AC Combiner). If PvDesign xml document is used independently from a broader Project XML document, then this element can also be used to define existing ElectricalPanel(s) where the PV system may be interconnected.

This element is not required when the PvDesign is used within a broader Project XML instance that contains an ExistingElectricalDitributionHierarchy and the PvDesign's Inverter(s) are to be connected to the ElectricalPanel(s) defined there.

NOTE: The EquipmentWhereConnectedIdRef within the Inverter's AcCircuitConnection should reference either this element, or a similar ElectricalPanel instance within an ExistingElectricalDistributionHierarchy element of a Project.xml.

NOTE: A PvDesign cannot be used within an ElectricalDistributionHierarchy element. It can only be associated with an ElectricalDistributionHierarchy via EquipmentWhereConnectedIdRef attribute of the Inverter's AcTie-InCircuitConnection element.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="conduitSegment" type="conduitSegment" minOccurs="0"
                maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>A conduit segment used in this design.  Note that if the PvSystem is used in an IEPM Project file, this Wireway Segment does not reference any ExistingWirewaySegments or ProposedWirewaySegments defined in the Site element.  Those elements are used for site survey data collection, not system definition. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="wirewayBox" type="wirewayBox">
                <xs:annotation>
                    <xs:documentation>A wireway boxes used in this design.  Note that if the PvSystem is used in an IEPM Project file, the WirewayBox does not reference any ExistingWirewaySegments or ProposedWirewaySegments defined in the Site element.  Those elements are used for site survey data collection, not system definition.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="sceneOriginGeoTag" type="geoLocation" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Coordinate system geo reference origin for the system.  All child components that specify 3D coordinates are in units meters relative to this location.  The 3D coordinate of this origin is (0,0,0).</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="weatherData">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="ExpectedHighTemperature" type="xs:decimal">
                            <xs:annotation>
                                <xs:documentation>Expected highest temperature in degrees Celcius at the system's location.  Used to evaluate equipment derating.</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element minOccurs="0" name="ExpectedLowTemperature" type="xs:decimal">
                            <xs:annotation>
                                <xs:documentation>Expected lowest temperature in degrees Celcius at the system's location.  Used to evaluate maximum system output.</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element minOccurs="0" name="siteWeatherData" type="siteWeatherDataType"
                        />
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
